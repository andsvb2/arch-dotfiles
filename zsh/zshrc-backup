######################################################################################
###                          __________       .__
###                          \____    /  _____|  |__
###                            /     /  /  ___/  |  \
###                           /     /_  \___ \|   Y  \
###                          /_______ \/____  >___|  /
###                                  \/     \/     \/
###                        =============================
###                      ==== ZSH USER SHELL SETTINGS ====
###                        =============================
###
###   CONFESSION: I cannibalized a bunch of this from other sources, primarily "Oh My
###   Zsh." I've got no use for something like a full-fledged 'framework' dealie, and
###   have no patience for rewriting some of these things (like VCS info) from scratch
###   when serviceable examples exist already. I just grabbed the handfull of files I
###   actually use, trimmed out the specific functions I need and tossed out the rest.
###   There's almost certainly a cleaner way to do some (most?) of what I've got here.
###   Feel free to drop me a line if you have any suggestions.
###
###   Credit should go to the original authors
###
#######################################################################################

#######################################################################################
###  BASIC OPTIONS
#######################################################################################

autoload colors; colors;
setopt autocd cdablevars multios automenu nomatch always_to_end complete_in_word append_history share_history hist_ignore_all_dups
setopt NO_GLOBAL_RCS
unsetopt beep extendedglob notify
autoload -Uz compinit
compinit
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
HISTFILE=~/.zsh-histfile
HISTSIZE=1000
SAVEHIST=1000


#######################################################################################
###  COMPLETIONS
#######################################################################################

zmodload -i zsh/complist

# Automatically rehash
zstyle ':completion:*' rehash true

### Completion order:
### 1) Case-insensitive (all)
### 2) Partial-word
### 3) Substring

if [ "x$CASE_SENSITIVE" = "xtrue" ]; then
  zstyle ':completion:*' matcher-list 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
  unset CASE_SENSITIVE
else
  zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
fi

zstyle ':completion:*' list-colors ''

### disable named-directories autocompletion
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories
cdpath=(.)

### Don't complete uninteresting users
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm amanda apache at avahi avahi-autoipd beaglidx bin cacti canna \
        clamav daemon dbus distcache dnsmasq dovecot fax ftp games gdm \
        gkrellmd gopher hacluster haldaemon halt hsqldb ident junkbust kdm \
        ldap lp mail mailman mailnull man messagebus  mldonkey mysql nagios \
        named netdump news nfsnobody nobody nscd ntp nut nx obsrun openvpn \
        operator pcap polkitd postfix postgres privoxy pulse pvm quagga radvd \
        rpc rpcuser rpm rtkit scard shutdown squid sshd statd svn sync tftp \
        usbmux uucp vcsa wwwrun xfs '_*'

### ... unless we really want to.
zstyle '*' single-ignored show

if [ "x$COMPLETION_WAITING_DOTS" = "xtrue" ]; then
  expand-or-complete-with-dots() {
    echo -n "\e[31m......\e[0m"
    zle expand-or-complete
    zle redisplay
  }
  zle -N expand-or-complete-with-dots
  bindkey "^I" expand-or-complete-with-dots
fi

### Quickly select and kill a process
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u `whoami` -o pid,user,comm -w -w"

#######################################################################################
###  KEYBINDINGS
#######################################################################################

### Use Emacs-style keybindings
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

bindkey -e

### Set <Home> and <End> keys to work right
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line
fi
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}"  end-of-line
fi

### Per-command history search
if [[ "${terminfo[kcuu1]}" != "" ]]; then
    bindkey "${terminfo[kcuu1]}" up-line-or-search
fi
if [[ "${terminfo[kcud1]}" != "" ]]; then
    bindkey "${terminfo[kcud1]}" down-line-or-search
fi

#######################################################################################
###  SPECIAL FUNCTIONS
#######################################################################################

### Source configuration 'modules:' Git status, mark-and-jump, syntax
### highlighting, pkgfile script, aliases and of course, the prompt. These must be
### done in order.

#for files (/home/anderson/.config/shell-config/extra/*.zsh); do
#  source $files
#done

# Syntax highlighting plugin
#source /home/anderson/.config/shell-config/extra/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


#######################################################################################
###  PROMPT & COLOR SETUP
#######################################################################################

### File colors
export LSCOLORS="Gxfxcxdxbxegedabagacad"
ls --color -d . &>/dev/null 2>&1 && alias ls='ls --color=tty' || alias ls='ls -G'

### Apply theming defaults
PS1="%n@%m:%~%# "

### Setup the prompt with pretty colors
setopt prompt_subst


### Show notifier in Git repo
#function git_prompt_info() {
#  ref=$(command git symbolic-ref HEAD 2> /dev/null) || \
#  ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
#  echo "$GIT_PROMPT_PREFIX"
#}

# Show notifier in Mercurial repo
#function hg_prompt_info {
#  if [[ -d .hg ]] || $(hg summary > /dev/null 2>&1); then
#    echo "$HG_PROMPT_PREFIX"
#    unset _DISPLAY
#  fi
#}

### Declare prompt

#if [[ "$(hostname)" = "tamaru-antergos" ]]; then
#PROMPT='%{$fg[blue]%}▀▀▀▀▀▀▀▀▀▀%{$fg[red]%}▀▀▀▀▀▀▀▀▀▀%{$fg[yellow]%}▀▀▀▀▀▀▀▀▀▀%{$fg[green]%}▀▀▀▀▀▀▀▀▀▀%{$fg[red]%}$(git_prompt_info)$(hg_prompt_info)%{$reset_color%} %1d »»» '
#else
#    PROMPT='%{$fg[red]%}SSH →%{$fg[blue]%}■■■%{$fg[red]%}■■■%{$fg[yellow]%}■■■%{$fg[green]%}■■■ %{$reset_color%}'
#    RPROMPT='%{$fg[red]%}«%{$fg[default]%} %1d %{$fg[red]%}■■■ '
#fi

#######################################################################################
###  ALIASES
#######################################################################################

alias atualizar="sudo reflector --verbose -c BR -l 15 -f 7 --sort rate --save /etc/pacman.d/mirrorlist && cat /etc/pacman.d/mirrorlist && sudo 
pacman -Syyu && sudo aura -Akua && tlmgr update --list && sudo tlmgr update --self --all"
alias orphan='sudo pacman -Rsn $(pacman -Qqdt)'
#alias E="SUDO_EDITOR=\"emacsclient\" sudo -e"
alias E="SUDO_EDITOR=\"emacsclient -t -a emacs\" sudoedit"
alias e="emacsclient -t"
